// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module msm_arr_bucket_unit_Loop_VITIS_LOOP_430_2_proc16 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        num_padd_ops_dout,
        num_padd_ops_empty_n,
        num_padd_ops_read,
        CFIFO_din,
        CFIFO_full_n,
        CFIFO_write,
        B_0_dout,
        B_0_empty_n,
        B_0_read,
        OVFIFO_dout,
        OVFIFO_empty_n,
        OVFIFO_read,
        B_1_dout,
        B_1_empty_n,
        B_1_read,
        B_2_dout,
        B_2_empty_n,
        B_2_read,
        B_3_dout,
        B_3_empty_n,
        B_3_read,
        B_4_dout,
        B_4_empty_n,
        B_4_read,
        B_5_dout,
        B_5_empty_n,
        B_5_read,
        B_6_dout,
        B_6_empty_n,
        B_6_read,
        B_7_dout,
        B_7_empty_n,
        B_7_read,
        B_8_dout,
        B_8_empty_n,
        B_8_read,
        B_9_dout,
        B_9_empty_n,
        B_9_read,
        B_10_dout,
        B_10_empty_n,
        B_10_read,
        B_11_dout,
        B_11_empty_n,
        B_11_read,
        B_12_dout,
        B_12_empty_n,
        B_12_read,
        B_13_dout,
        B_13_empty_n,
        B_13_read,
        B_14_dout,
        B_14_empty_n,
        B_14_read,
        B_15_dout,
        B_15_empty_n,
        B_15_read,
        num_padd_ops_out_din,
        num_padd_ops_out_full_n,
        num_padd_ops_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [12:0] num_padd_ops_dout;
input   num_padd_ops_empty_n;
output   num_padd_ops_read;
output  [81:0] CFIFO_din;
input   CFIFO_full_n;
output   CFIFO_write;
input  [38:0] B_0_dout;
input   B_0_empty_n;
output   B_0_read;
input  [42:0] OVFIFO_dout;
input   OVFIFO_empty_n;
output   OVFIFO_read;
input  [38:0] B_1_dout;
input   B_1_empty_n;
output   B_1_read;
input  [38:0] B_2_dout;
input   B_2_empty_n;
output   B_2_read;
input  [38:0] B_3_dout;
input   B_3_empty_n;
output   B_3_read;
input  [38:0] B_4_dout;
input   B_4_empty_n;
output   B_4_read;
input  [38:0] B_5_dout;
input   B_5_empty_n;
output   B_5_read;
input  [38:0] B_6_dout;
input   B_6_empty_n;
output   B_6_read;
input  [38:0] B_7_dout;
input   B_7_empty_n;
output   B_7_read;
input  [38:0] B_8_dout;
input   B_8_empty_n;
output   B_8_read;
input  [38:0] B_9_dout;
input   B_9_empty_n;
output   B_9_read;
input  [38:0] B_10_dout;
input   B_10_empty_n;
output   B_10_read;
input  [38:0] B_11_dout;
input   B_11_empty_n;
output   B_11_read;
input  [38:0] B_12_dout;
input   B_12_empty_n;
output   B_12_read;
input  [38:0] B_13_dout;
input   B_13_empty_n;
output   B_13_read;
input  [38:0] B_14_dout;
input   B_14_empty_n;
output   B_14_read;
input  [38:0] B_15_dout;
input   B_15_empty_n;
output   B_15_read;
output  [12:0] num_padd_ops_out_din;
input   num_padd_ops_out_full_n;
output   num_padd_ops_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg num_padd_ops_read;
reg CFIFO_write;
reg B_0_read;
reg OVFIFO_read;
reg B_1_read;
reg B_2_read;
reg B_3_read;
reg B_4_read;
reg B_5_read;
reg B_6_read;
reg B_7_read;
reg B_8_read;
reg B_9_read;
reg B_10_read;
reg B_11_read;
reg B_12_read;
reg B_13_read;
reg B_14_read;
reg B_15_read;
reg num_padd_ops_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    num_padd_ops_blk_n;
reg    CFIFO_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_341;
reg   [0:0] icmp_ln878_reg_341_pp0_iter2_reg;
reg    B_0_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln878_reg_341_pp0_iter1_reg;
reg   [3:0] v1_V_reg_350;
reg    OVFIFO_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    B_1_blk_n;
reg    B_2_blk_n;
reg    B_3_blk_n;
reg    B_4_blk_n;
reg    B_5_blk_n;
reg    B_6_blk_n;
reg    B_7_blk_n;
reg    B_8_blk_n;
reg    B_9_blk_n;
reg    B_10_blk_n;
reg    B_11_blk_n;
reg    B_12_blk_n;
reg    B_13_blk_n;
reg    B_14_blk_n;
reg    B_15_blk_n;
reg    num_padd_ops_out_blk_n;
reg   [12:0] i_reg_249;
reg   [12:0] num_padd_ops_read_reg_331;
wire   [12:0] i_4_fu_297_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op58_read_state4;
reg    ap_predicate_op60_read_state4;
reg    ap_predicate_op62_read_state4;
reg    ap_predicate_op64_read_state4;
reg    ap_predicate_op66_read_state4;
reg    ap_predicate_op68_read_state4;
reg    ap_predicate_op70_read_state4;
reg    ap_predicate_op72_read_state4;
reg    ap_predicate_op74_read_state4;
reg    ap_predicate_op76_read_state4;
reg    ap_predicate_op78_read_state4;
reg    ap_predicate_op80_read_state4;
reg    ap_predicate_op82_read_state4;
reg    ap_predicate_op84_read_state4;
reg    ap_predicate_op86_read_state4;
reg    ap_predicate_op88_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_303_p2;
reg   [42:0] tmp_reg_345;
reg   [42:0] tmp_reg_345_pp0_iter2_reg;
reg   [3:0] v1_V_reg_350_pp0_iter2_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [38:0] ap_phi_reg_pp0_iter0_v2_V_reg_260;
reg   [38:0] ap_phi_reg_pp0_iter1_v2_V_reg_260;
reg   [38:0] ap_phi_reg_pp0_iter2_v2_V_reg_260;
reg   [38:0] ap_phi_reg_pp0_iter3_v2_V_reg_260;
reg    ap_block_pp0_stage0_01001;
wire   [38:0] trunc_ln674_fu_318_p1;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((v1_V_reg_350 == 4'd0) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_0_dout;
        end else if (((v1_V_reg_350 == 4'd1) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_1_dout;
        end else if (((v1_V_reg_350 == 4'd2) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_2_dout;
        end else if (((v1_V_reg_350 == 4'd3) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_3_dout;
        end else if (((v1_V_reg_350 == 4'd4) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_4_dout;
        end else if (((v1_V_reg_350 == 4'd5) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_5_dout;
        end else if (((v1_V_reg_350 == 4'd6) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_6_dout;
        end else if (((v1_V_reg_350 == 4'd7) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_7_dout;
        end else if (((v1_V_reg_350 == 4'd8) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_8_dout;
        end else if (((v1_V_reg_350 == 4'd9) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_9_dout;
        end else if (((v1_V_reg_350 == 4'd10) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_10_dout;
        end else if (((v1_V_reg_350 == 4'd11) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_11_dout;
        end else if (((v1_V_reg_350 == 4'd12) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_12_dout;
        end else if (((v1_V_reg_350 == 4'd13) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_13_dout;
        end else if (((v1_V_reg_350 == 4'd14) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_14_dout;
        end else if (((v1_V_reg_350 == 4'd15) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= B_15_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_v2_V_reg_260 <= ap_phi_reg_pp0_iter2_v2_V_reg_260;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_249 <= 13'd0;
    end else if (((icmp_ln878_fu_303_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_249 <= i_4_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_v2_V_reg_260 <= ap_phi_reg_pp0_iter0_v2_V_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_v2_V_reg_260 <= ap_phi_reg_pp0_iter1_v2_V_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln878_reg_341 <= icmp_ln878_fu_303_p2;
        icmp_ln878_reg_341_pp0_iter1_reg <= icmp_ln878_reg_341;
        tmp_reg_345 <= OVFIFO_dout;
        v1_V_reg_350 <= {{OVFIFO_dout[42:39]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln878_reg_341_pp0_iter2_reg <= icmp_ln878_reg_341_pp0_iter1_reg;
        tmp_reg_345_pp0_iter2_reg <= tmp_reg_345;
        v1_V_reg_350_pp0_iter2_reg <= v1_V_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_padd_ops_read_reg_331 <= num_padd_ops_dout;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd0) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_0_blk_n = B_0_empty_n;
    end else begin
        B_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op86_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_0_read = 1'b1;
    end else begin
        B_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd10) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_10_blk_n = B_10_empty_n;
    end else begin
        B_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op66_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_10_read = 1'b1;
    end else begin
        B_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd11) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_11_blk_n = B_11_empty_n;
    end else begin
        B_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op64_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_11_read = 1'b1;
    end else begin
        B_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd12) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_12_blk_n = B_12_empty_n;
    end else begin
        B_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op62_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_12_read = 1'b1;
    end else begin
        B_12_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd13) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_13_blk_n = B_13_empty_n;
    end else begin
        B_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op60_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_13_read = 1'b1;
    end else begin
        B_13_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd14) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_14_blk_n = B_14_empty_n;
    end else begin
        B_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op58_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_14_read = 1'b1;
    end else begin
        B_14_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd15) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_15_blk_n = B_15_empty_n;
    end else begin
        B_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op88_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_15_read = 1'b1;
    end else begin
        B_15_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd1) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_1_blk_n = B_1_empty_n;
    end else begin
        B_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op84_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_1_read = 1'b1;
    end else begin
        B_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd2) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_2_blk_n = B_2_empty_n;
    end else begin
        B_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op82_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_2_read = 1'b1;
    end else begin
        B_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd3) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_3_blk_n = B_3_empty_n;
    end else begin
        B_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op80_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_3_read = 1'b1;
    end else begin
        B_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd4) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_4_blk_n = B_4_empty_n;
    end else begin
        B_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op78_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_4_read = 1'b1;
    end else begin
        B_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd5) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_5_blk_n = B_5_empty_n;
    end else begin
        B_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op76_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_5_read = 1'b1;
    end else begin
        B_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd6) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_6_blk_n = B_6_empty_n;
    end else begin
        B_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op74_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_6_read = 1'b1;
    end else begin
        B_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd7) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_7_blk_n = B_7_empty_n;
    end else begin
        B_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op72_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_7_read = 1'b1;
    end else begin
        B_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd8) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_8_blk_n = B_8_empty_n;
    end else begin
        B_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op70_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_8_read = 1'b1;
    end else begin
        B_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((v1_V_reg_350 == 4'd9) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_9_blk_n = B_9_empty_n;
    end else begin
        B_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op68_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_9_read = 1'b1;
    end else begin
        B_9_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_341_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        CFIFO_blk_n = CFIFO_full_n;
    end else begin
        CFIFO_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_341_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        CFIFO_write = 1'b1;
    end else begin
        CFIFO_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        OVFIFO_blk_n = OVFIFO_empty_n;
    end else begin
        OVFIFO_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OVFIFO_read = 1'b1;
    end else begin
        OVFIFO_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_303_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_blk_n = num_padd_ops_empty_n;
    end else begin
        num_padd_ops_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_out_blk_n = num_padd_ops_out_full_n;
    end else begin
        num_padd_ops_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_out_write = 1'b1;
    end else begin
        num_padd_ops_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_read = 1'b1;
    end else begin
        num_padd_ops_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln878_fu_303_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln878_fu_303_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign CFIFO_din = {{{v1_V_reg_350_pp0_iter2_reg}, {ap_phi_reg_pp0_iter3_v2_V_reg_260}}, {trunc_ln674_fu_318_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == CFIFO_full_n) & (icmp_ln878_reg_341_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == OVFIFO_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op88_read_state4 == 1'b1) & (1'b0 == B_15_empty_n)) | ((ap_predicate_op86_read_state4 == 1'b1) & (1'b0 == B_0_empty_n)) | ((ap_predicate_op84_read_state4 == 1'b1) & (1'b0 == B_1_empty_n)) | ((ap_predicate_op82_read_state4 == 1'b1) & (1'b0 == B_2_empty_n)) | ((ap_predicate_op80_read_state4 == 1'b1) & (1'b0 == B_3_empty_n)) | ((1'b0 == B_4_empty_n) & (ap_predicate_op78_read_state4 == 1'b1)) | ((1'b0 == B_5_empty_n) & (ap_predicate_op76_read_state4 == 1'b1)) | ((1'b0 == B_6_empty_n) & (ap_predicate_op74_read_state4 == 1'b1)) | ((1'b0 == B_7_empty_n) & (ap_predicate_op72_read_state4 == 1'b1)) | ((1'b0 == B_8_empty_n) & (ap_predicate_op70_read_state4 == 1'b1)) | ((1'b0 == B_9_empty_n) & (ap_predicate_op68_read_state4 == 1'b1)) | ((1'b0 == B_10_empty_n) & (ap_predicate_op66_read_state4 == 1'b1)) | ((1'b0 == B_11_empty_n) & (ap_predicate_op64_read_state4 == 1'b1)) | ((1'b0 == B_12_empty_n) & (ap_predicate_op62_read_state4 == 1'b1)) | ((1'b0 == B_13_empty_n) & (ap_predicate_op60_read_state4 == 1'b1)) | ((1'b0 == B_14_empty_n) & (ap_predicate_op58_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == CFIFO_full_n) & (icmp_ln878_reg_341_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == OVFIFO_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op88_read_state4 == 1'b1) & (1'b0 == B_15_empty_n)) | ((ap_predicate_op86_read_state4 == 1'b1) & (1'b0 == B_0_empty_n)) | ((ap_predicate_op84_read_state4 == 1'b1) & (1'b0 == B_1_empty_n)) | ((ap_predicate_op82_read_state4 == 1'b1) & (1'b0 == B_2_empty_n)) | ((ap_predicate_op80_read_state4 == 1'b1) & (1'b0 == B_3_empty_n)) | ((1'b0 == B_4_empty_n) & (ap_predicate_op78_read_state4 == 1'b1)) | ((1'b0 == B_5_empty_n) & (ap_predicate_op76_read_state4 == 1'b1)) | ((1'b0 == B_6_empty_n) & (ap_predicate_op74_read_state4 == 1'b1)) | ((1'b0 == B_7_empty_n) & (ap_predicate_op72_read_state4 == 1'b1)) | ((1'b0 == B_8_empty_n) & (ap_predicate_op70_read_state4 == 1'b1)) | ((1'b0 == B_9_empty_n) & (ap_predicate_op68_read_state4 == 1'b1)) | ((1'b0 == B_10_empty_n) & (ap_predicate_op66_read_state4 == 1'b1)) | ((1'b0 == B_11_empty_n) & (ap_predicate_op64_read_state4 == 1'b1)) | ((1'b0 == B_12_empty_n) & (ap_predicate_op62_read_state4 == 1'b1)) | ((1'b0 == B_13_empty_n) & (ap_predicate_op60_read_state4 == 1'b1)) | ((1'b0 == B_14_empty_n) & (ap_predicate_op58_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == CFIFO_full_n) & (icmp_ln878_reg_341_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == OVFIFO_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op88_read_state4 == 1'b1) & (1'b0 == B_15_empty_n)) | ((ap_predicate_op86_read_state4 == 1'b1) & (1'b0 == B_0_empty_n)) | ((ap_predicate_op84_read_state4 == 1'b1) & (1'b0 == B_1_empty_n)) | ((ap_predicate_op82_read_state4 == 1'b1) & (1'b0 == B_2_empty_n)) | ((ap_predicate_op80_read_state4 == 1'b1) & (1'b0 == B_3_empty_n)) | ((1'b0 == B_4_empty_n) & (ap_predicate_op78_read_state4 == 1'b1)) | ((1'b0 == B_5_empty_n) & (ap_predicate_op76_read_state4 == 1'b1)) | ((1'b0 == B_6_empty_n) & (ap_predicate_op74_read_state4 == 1'b1)) | ((1'b0 == B_7_empty_n) & (ap_predicate_op72_read_state4 == 1'b1)) | ((1'b0 == B_8_empty_n) & (ap_predicate_op70_read_state4 == 1'b1)) | ((1'b0 == B_9_empty_n) & (ap_predicate_op68_read_state4 == 1'b1)) | ((1'b0 == B_10_empty_n) & (ap_predicate_op66_read_state4 == 1'b1)) | ((1'b0 == B_11_empty_n) & (ap_predicate_op64_read_state4 == 1'b1)) | ((1'b0 == B_12_empty_n) & (ap_predicate_op62_read_state4 == 1'b1)) | ((1'b0 == B_13_empty_n) & (ap_predicate_op60_read_state4 == 1'b1)) | ((1'b0 == B_14_empty_n) & (ap_predicate_op58_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (num_padd_ops_out_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (1'b0 == OVFIFO_empty_n);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((ap_predicate_op88_read_state4 == 1'b1) & (1'b0 == B_15_empty_n)) | ((ap_predicate_op86_read_state4 == 1'b1) & (1'b0 == B_0_empty_n)) | ((ap_predicate_op84_read_state4 == 1'b1) & (1'b0 == B_1_empty_n)) | ((ap_predicate_op82_read_state4 == 1'b1) & (1'b0 == B_2_empty_n)) | ((ap_predicate_op80_read_state4 == 1'b1) & (1'b0 == B_3_empty_n)) | ((1'b0 == B_4_empty_n) & (ap_predicate_op78_read_state4 == 1'b1)) | ((1'b0 == B_5_empty_n) & (ap_predicate_op76_read_state4 == 1'b1)) | ((1'b0 == B_6_empty_n) & (ap_predicate_op74_read_state4 == 1'b1)) | ((1'b0 == B_7_empty_n) & (ap_predicate_op72_read_state4 == 1'b1)) | ((1'b0 == B_8_empty_n) & (ap_predicate_op70_read_state4 == 1'b1)) | ((1'b0 == B_9_empty_n) & (ap_predicate_op68_read_state4 == 1'b1)) | ((1'b0 == B_10_empty_n) & (ap_predicate_op66_read_state4 == 1'b1)) | ((1'b0 == B_11_empty_n) & (ap_predicate_op64_read_state4 == 1'b1)) | ((1'b0 == B_12_empty_n) & (ap_predicate_op62_read_state4 == 1'b1)) | ((1'b0 == B_13_empty_n) & (ap_predicate_op60_read_state4 == 1'b1)) | ((1'b0 == B_14_empty_n) & (ap_predicate_op58_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((1'b0 == CFIFO_full_n) & (icmp_ln878_reg_341_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_v2_V_reg_260 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state4 = ((v1_V_reg_350 == 4'd14) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op60_read_state4 = ((v1_V_reg_350 == 4'd13) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op62_read_state4 = ((v1_V_reg_350 == 4'd12) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op64_read_state4 = ((v1_V_reg_350 == 4'd11) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op66_read_state4 = ((v1_V_reg_350 == 4'd10) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op68_read_state4 = ((v1_V_reg_350 == 4'd9) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op70_read_state4 = ((v1_V_reg_350 == 4'd8) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op72_read_state4 = ((v1_V_reg_350 == 4'd7) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_read_state4 = ((v1_V_reg_350 == 4'd6) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op76_read_state4 = ((v1_V_reg_350 == 4'd5) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op78_read_state4 = ((v1_V_reg_350 == 4'd4) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op80_read_state4 = ((v1_V_reg_350 == 4'd3) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op82_read_state4 = ((v1_V_reg_350 == 4'd2) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op84_read_state4 = ((v1_V_reg_350 == 4'd1) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op86_read_state4 = ((v1_V_reg_350 == 4'd0) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op88_read_state4 = ((v1_V_reg_350 == 4'd15) & (icmp_ln878_reg_341_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign i_4_fu_297_p2 = (i_reg_249 + 13'd1);

assign icmp_ln878_fu_303_p2 = ((i_reg_249 == num_padd_ops_read_reg_331) ? 1'b1 : 1'b0);

assign num_padd_ops_out_din = num_padd_ops_dout;

assign start_out = real_start;

assign trunc_ln674_fu_318_p1 = tmp_reg_345_pp0_iter2_reg[38:0];

endmodule //msm_arr_bucket_unit_Loop_VITIS_LOOP_430_2_proc16
