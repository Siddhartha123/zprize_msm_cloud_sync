// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        num_padd_ops_dout,
        num_padd_ops_empty_n,
        num_padd_ops_read,
        CFIFO_dout,
        CFIFO_empty_n,
        CFIFO_read,
        BFIFO_2_din,
        BFIFO_2_full_n,
        BFIFO_2_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [12:0] num_padd_ops_dout;
input   num_padd_ops_empty_n;
output   num_padd_ops_read;
input  [81:0] CFIFO_dout;
input   CFIFO_empty_n;
output   CFIFO_read;
output  [42:0] BFIFO_2_din;
input   BFIFO_2_full_n;
output   BFIFO_2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg num_padd_ops_read;
reg CFIFO_read;
reg BFIFO_2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    num_padd_ops_blk_n;
reg    CFIFO_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_220;
reg    BFIFO_2_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln878_reg_220_pp0_iter1_reg;
reg   [12:0] i_reg_97;
reg   [12:0] num_padd_ops_read_reg_210;
wire   [12:0] i_3_fu_108_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_114_p2;
reg   [3:0] tmpVal1_V_reg_224;
wire   [12:0] v2_V_7_fu_169_p2;
reg   [12:0] v2_V_7_reg_229;
wire   [12:0] v2_V_6_fu_185_p2;
reg   [12:0] v2_V_6_reg_234;
wire   [12:0] v2_V_fu_195_p2;
reg   [12:0] v2_V_reg_239;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] tmpVal2_V_3_fu_159_p4;
wire   [12:0] tmpVal2_V_fu_129_p4;
wire   [12:0] tmpVal2_V_4_fu_175_p4;
wire   [12:0] tmpVal2_V_1_fu_139_p4;
wire   [12:0] Part2_V_fu_191_p1;
wire   [12:0] tmpVal2_V_2_fu_149_p4;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_97 <= 13'd0;
    end else if (((icmp_ln878_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_97 <= i_3_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_reg_220 <= icmp_ln878_fu_114_p2;
        icmp_ln878_reg_220_pp0_iter1_reg <= icmp_ln878_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_padd_ops_read_reg_210 <= num_padd_ops_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpVal1_V_reg_224 <= {{CFIFO_dout[81:78]}};
        v2_V_6_reg_234 <= v2_V_6_fu_185_p2;
        v2_V_7_reg_229 <= v2_V_7_fu_169_p2;
        v2_V_reg_239 <= v2_V_fu_195_p2;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_220_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        BFIFO_2_blk_n = BFIFO_2_full_n;
    end else begin
        BFIFO_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_220_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        BFIFO_2_write = 1'b1;
    end else begin
        BFIFO_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CFIFO_blk_n = CFIFO_empty_n;
    end else begin
        CFIFO_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CFIFO_read = 1'b1;
    end else begin
        CFIFO_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_114_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_blk_n = num_padd_ops_empty_n;
    end else begin
        num_padd_ops_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_read = 1'b1;
    end else begin
        num_padd_ops_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln878_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln878_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BFIFO_2_din = {{{{tmpVal1_V_reg_224}, {v2_V_7_reg_229}}, {v2_V_6_reg_234}}, {v2_V_reg_239}};

assign Part2_V_fu_191_p1 = CFIFO_dout[12:0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln878_reg_220_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_220 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln878_reg_220_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_220 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln878_reg_220_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_220 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln878_reg_220 == 1'd0) & (1'b0 == CFIFO_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln878_reg_220_pp0_iter1_reg == 1'd0) & (1'b0 == BFIFO_2_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_3_fu_108_p2 = (i_reg_97 + 13'd1);

assign icmp_ln878_fu_114_p2 = ((i_reg_97 == num_padd_ops_read_reg_210) ? 1'b1 : 1'b0);

assign tmpVal2_V_1_fu_139_p4 = {{CFIFO_dout[64:52]}};

assign tmpVal2_V_2_fu_149_p4 = {{CFIFO_dout[51:39]}};

assign tmpVal2_V_3_fu_159_p4 = {{CFIFO_dout[38:26]}};

assign tmpVal2_V_4_fu_175_p4 = {{CFIFO_dout[25:13]}};

assign tmpVal2_V_fu_129_p4 = {{CFIFO_dout[77:65]}};

assign v2_V_6_fu_185_p2 = (tmpVal2_V_4_fu_175_p4 + tmpVal2_V_1_fu_139_p4);

assign v2_V_7_fu_169_p2 = (tmpVal2_V_3_fu_159_p4 + tmpVal2_V_fu_129_p4);

assign v2_V_fu_195_p2 = (Part2_V_fu_191_p1 + tmpVal2_V_2_fu_149_p4);

endmodule //msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc6
