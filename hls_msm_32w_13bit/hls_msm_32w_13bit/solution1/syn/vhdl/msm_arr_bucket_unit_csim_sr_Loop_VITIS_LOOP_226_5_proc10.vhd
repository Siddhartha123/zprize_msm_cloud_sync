-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_padd_ops_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    num_padd_ops_empty_n : IN STD_LOGIC;
    num_padd_ops_read : OUT STD_LOGIC;
    CFIFO_dout : IN STD_LOGIC_VECTOR (81 downto 0);
    CFIFO_empty_n : IN STD_LOGIC;
    CFIFO_read : OUT STD_LOGIC;
    BFIFO_2_din : OUT STD_LOGIC_VECTOR (42 downto 0);
    BFIFO_2_full_n : IN STD_LOGIC;
    BFIFO_2_write : OUT STD_LOGIC );
end;


architecture behav of msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal num_padd_ops_blk_n : STD_LOGIC;
    signal CFIFO_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln878_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal BFIFO_2_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal icmp_ln878_reg_232_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_99 : STD_LOGIC_VECTOR (12 downto 0);
    signal num_padd_ops_read_reg_222 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_3_fu_120_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln878_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_232_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpVal1_V_reg_236 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter26_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter27_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter28_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter29_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter30_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter31_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter32_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal1_V_reg_236_pp0_iter33_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal v2_V_7_reg_271 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_6_reg_276 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_reg_281 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal grp_padd_fu_110_p1_x : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_p1_y : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_p1_z : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_p2_x : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_p2_y : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_p2_z : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_ap_return_0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_ap_return_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_ap_return_2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_padd_fu_110_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call10 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call10 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call10 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call10 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4_ignore_call10 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5_ignore_call10 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6_ignore_call10 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7_ignore_call10 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8_ignore_call10 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9_ignore_call10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10_ignore_call10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11_ignore_call10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12_ignore_call10 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13_ignore_call10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14_ignore_call10 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15_ignore_call10 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16_ignore_call10 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17_ignore_call10 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18_ignore_call10 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19_ignore_call10 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20_ignore_call10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21_ignore_call10 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22_ignore_call10 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23_ignore_call10 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24_ignore_call10 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25_ignore_call10 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26_ignore_call10 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27_ignore_call10 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28_ignore_call10 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29_ignore_call10 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30_ignore_call10 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31_ignore_call10 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32_ignore_call10 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33_ignore_call10 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34_ignore_call10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp58 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component msm_arr_padd IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p1_x : IN STD_LOGIC_VECTOR (12 downto 0);
        p1_y : IN STD_LOGIC_VECTOR (12 downto 0);
        p1_z : IN STD_LOGIC_VECTOR (12 downto 0);
        p2_x : IN STD_LOGIC_VECTOR (12 downto 0);
        p2_y : IN STD_LOGIC_VECTOR (12 downto 0);
        p2_z : IN STD_LOGIC_VECTOR (12 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (12 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_padd_fu_110 : component msm_arr_padd
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p1_x => grp_padd_fu_110_p1_x,
        p1_y => grp_padd_fu_110_p1_y,
        p1_z => grp_padd_fu_110_p1_z,
        p2_x => grp_padd_fu_110_p2_x,
        p2_y => grp_padd_fu_110_p2_y,
        p2_z => grp_padd_fu_110_p2_z,
        ap_return_0 => grp_padd_fu_110_ap_return_0,
        ap_return_1 => grp_padd_fu_110_ap_return_1,
        ap_return_2 => grp_padd_fu_110_ap_return_2,
        ap_ce => grp_padd_fu_110_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                elsif ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_99 <= ap_const_lv13_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_fu_126_p2 = ap_const_lv1_0))) then 
                i_reg_99 <= i_3_fu_120_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln878_reg_232 <= icmp_ln878_fu_126_p2;
                icmp_ln878_reg_232_pp0_iter1_reg <= icmp_ln878_reg_232;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln878_reg_232_pp0_iter10_reg <= icmp_ln878_reg_232_pp0_iter9_reg;
                icmp_ln878_reg_232_pp0_iter11_reg <= icmp_ln878_reg_232_pp0_iter10_reg;
                icmp_ln878_reg_232_pp0_iter12_reg <= icmp_ln878_reg_232_pp0_iter11_reg;
                icmp_ln878_reg_232_pp0_iter13_reg <= icmp_ln878_reg_232_pp0_iter12_reg;
                icmp_ln878_reg_232_pp0_iter14_reg <= icmp_ln878_reg_232_pp0_iter13_reg;
                icmp_ln878_reg_232_pp0_iter15_reg <= icmp_ln878_reg_232_pp0_iter14_reg;
                icmp_ln878_reg_232_pp0_iter16_reg <= icmp_ln878_reg_232_pp0_iter15_reg;
                icmp_ln878_reg_232_pp0_iter17_reg <= icmp_ln878_reg_232_pp0_iter16_reg;
                icmp_ln878_reg_232_pp0_iter18_reg <= icmp_ln878_reg_232_pp0_iter17_reg;
                icmp_ln878_reg_232_pp0_iter19_reg <= icmp_ln878_reg_232_pp0_iter18_reg;
                icmp_ln878_reg_232_pp0_iter20_reg <= icmp_ln878_reg_232_pp0_iter19_reg;
                icmp_ln878_reg_232_pp0_iter21_reg <= icmp_ln878_reg_232_pp0_iter20_reg;
                icmp_ln878_reg_232_pp0_iter22_reg <= icmp_ln878_reg_232_pp0_iter21_reg;
                icmp_ln878_reg_232_pp0_iter23_reg <= icmp_ln878_reg_232_pp0_iter22_reg;
                icmp_ln878_reg_232_pp0_iter24_reg <= icmp_ln878_reg_232_pp0_iter23_reg;
                icmp_ln878_reg_232_pp0_iter25_reg <= icmp_ln878_reg_232_pp0_iter24_reg;
                icmp_ln878_reg_232_pp0_iter26_reg <= icmp_ln878_reg_232_pp0_iter25_reg;
                icmp_ln878_reg_232_pp0_iter27_reg <= icmp_ln878_reg_232_pp0_iter26_reg;
                icmp_ln878_reg_232_pp0_iter28_reg <= icmp_ln878_reg_232_pp0_iter27_reg;
                icmp_ln878_reg_232_pp0_iter29_reg <= icmp_ln878_reg_232_pp0_iter28_reg;
                icmp_ln878_reg_232_pp0_iter2_reg <= icmp_ln878_reg_232_pp0_iter1_reg;
                icmp_ln878_reg_232_pp0_iter30_reg <= icmp_ln878_reg_232_pp0_iter29_reg;
                icmp_ln878_reg_232_pp0_iter31_reg <= icmp_ln878_reg_232_pp0_iter30_reg;
                icmp_ln878_reg_232_pp0_iter32_reg <= icmp_ln878_reg_232_pp0_iter31_reg;
                icmp_ln878_reg_232_pp0_iter33_reg <= icmp_ln878_reg_232_pp0_iter32_reg;
                icmp_ln878_reg_232_pp0_iter3_reg <= icmp_ln878_reg_232_pp0_iter2_reg;
                icmp_ln878_reg_232_pp0_iter4_reg <= icmp_ln878_reg_232_pp0_iter3_reg;
                icmp_ln878_reg_232_pp0_iter5_reg <= icmp_ln878_reg_232_pp0_iter4_reg;
                icmp_ln878_reg_232_pp0_iter6_reg <= icmp_ln878_reg_232_pp0_iter5_reg;
                icmp_ln878_reg_232_pp0_iter7_reg <= icmp_ln878_reg_232_pp0_iter6_reg;
                icmp_ln878_reg_232_pp0_iter8_reg <= icmp_ln878_reg_232_pp0_iter7_reg;
                icmp_ln878_reg_232_pp0_iter9_reg <= icmp_ln878_reg_232_pp0_iter8_reg;
                tmpVal1_V_reg_236_pp0_iter10_reg <= tmpVal1_V_reg_236_pp0_iter9_reg;
                tmpVal1_V_reg_236_pp0_iter11_reg <= tmpVal1_V_reg_236_pp0_iter10_reg;
                tmpVal1_V_reg_236_pp0_iter12_reg <= tmpVal1_V_reg_236_pp0_iter11_reg;
                tmpVal1_V_reg_236_pp0_iter13_reg <= tmpVal1_V_reg_236_pp0_iter12_reg;
                tmpVal1_V_reg_236_pp0_iter14_reg <= tmpVal1_V_reg_236_pp0_iter13_reg;
                tmpVal1_V_reg_236_pp0_iter15_reg <= tmpVal1_V_reg_236_pp0_iter14_reg;
                tmpVal1_V_reg_236_pp0_iter16_reg <= tmpVal1_V_reg_236_pp0_iter15_reg;
                tmpVal1_V_reg_236_pp0_iter17_reg <= tmpVal1_V_reg_236_pp0_iter16_reg;
                tmpVal1_V_reg_236_pp0_iter18_reg <= tmpVal1_V_reg_236_pp0_iter17_reg;
                tmpVal1_V_reg_236_pp0_iter19_reg <= tmpVal1_V_reg_236_pp0_iter18_reg;
                tmpVal1_V_reg_236_pp0_iter20_reg <= tmpVal1_V_reg_236_pp0_iter19_reg;
                tmpVal1_V_reg_236_pp0_iter21_reg <= tmpVal1_V_reg_236_pp0_iter20_reg;
                tmpVal1_V_reg_236_pp0_iter22_reg <= tmpVal1_V_reg_236_pp0_iter21_reg;
                tmpVal1_V_reg_236_pp0_iter23_reg <= tmpVal1_V_reg_236_pp0_iter22_reg;
                tmpVal1_V_reg_236_pp0_iter24_reg <= tmpVal1_V_reg_236_pp0_iter23_reg;
                tmpVal1_V_reg_236_pp0_iter25_reg <= tmpVal1_V_reg_236_pp0_iter24_reg;
                tmpVal1_V_reg_236_pp0_iter26_reg <= tmpVal1_V_reg_236_pp0_iter25_reg;
                tmpVal1_V_reg_236_pp0_iter27_reg <= tmpVal1_V_reg_236_pp0_iter26_reg;
                tmpVal1_V_reg_236_pp0_iter28_reg <= tmpVal1_V_reg_236_pp0_iter27_reg;
                tmpVal1_V_reg_236_pp0_iter29_reg <= tmpVal1_V_reg_236_pp0_iter28_reg;
                tmpVal1_V_reg_236_pp0_iter2_reg <= tmpVal1_V_reg_236;
                tmpVal1_V_reg_236_pp0_iter30_reg <= tmpVal1_V_reg_236_pp0_iter29_reg;
                tmpVal1_V_reg_236_pp0_iter31_reg <= tmpVal1_V_reg_236_pp0_iter30_reg;
                tmpVal1_V_reg_236_pp0_iter32_reg <= tmpVal1_V_reg_236_pp0_iter31_reg;
                tmpVal1_V_reg_236_pp0_iter33_reg <= tmpVal1_V_reg_236_pp0_iter32_reg;
                tmpVal1_V_reg_236_pp0_iter3_reg <= tmpVal1_V_reg_236_pp0_iter2_reg;
                tmpVal1_V_reg_236_pp0_iter4_reg <= tmpVal1_V_reg_236_pp0_iter3_reg;
                tmpVal1_V_reg_236_pp0_iter5_reg <= tmpVal1_V_reg_236_pp0_iter4_reg;
                tmpVal1_V_reg_236_pp0_iter6_reg <= tmpVal1_V_reg_236_pp0_iter5_reg;
                tmpVal1_V_reg_236_pp0_iter7_reg <= tmpVal1_V_reg_236_pp0_iter6_reg;
                tmpVal1_V_reg_236_pp0_iter8_reg <= tmpVal1_V_reg_236_pp0_iter7_reg;
                tmpVal1_V_reg_236_pp0_iter9_reg <= tmpVal1_V_reg_236_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                num_padd_ops_read_reg_222 <= num_padd_ops_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmpVal1_V_reg_236 <= CFIFO_dout(81 downto 78);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln878_reg_232_pp0_iter32_reg = ap_const_lv1_0))) then
                v2_V_6_reg_276 <= grp_padd_fu_110_ap_return_1;
                v2_V_7_reg_271 <= grp_padd_fu_110_ap_return_0;
                v2_V_reg_281 <= grp_padd_fu_110_ap_return_2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, num_padd_ops_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter0, icmp_ln878_fu_126_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter33)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_fu_126_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln878_fu_126_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    BFIFO_2_blk_n_assign_proc : process(BFIFO_2_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter34, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
        if (((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            BFIFO_2_blk_n <= BFIFO_2_full_n;
        else 
            BFIFO_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    BFIFO_2_din <= (((tmpVal1_V_reg_236_pp0_iter33_reg & v2_V_7_reg_271) & v2_V_6_reg_276) & v2_V_reg_281);

    BFIFO_2_write_assign_proc : process(ap_enable_reg_pp0_iter34, icmp_ln878_reg_232_pp0_iter33_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            BFIFO_2_write <= ap_const_logic_1;
        else 
            BFIFO_2_write <= ap_const_logic_0;
        end if; 
    end process;


    CFIFO_blk_n_assign_proc : process(CFIFO_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln878_reg_232)
    begin
        if (((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            CFIFO_blk_n <= CFIFO_empty_n;
        else 
            CFIFO_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    CFIFO_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln878_reg_232, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            CFIFO_read <= ap_const_logic_1;
        else 
            CFIFO_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state37 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_232, ap_enable_reg_pp0_iter34, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_232, ap_enable_reg_pp0_iter34, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp58_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_232, ap_enable_reg_pp0_iter34, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp58 <= (((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_232, ap_enable_reg_pp0_iter34, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, num_padd_ops_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_pp0_stage0_iter34_assign_proc : process(BFIFO_2_full_n, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
                ap_block_state36_pp0_stage0_iter34 <= ((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_const_logic_0 = BFIFO_2_full_n));
    end process;


    ap_block_state36_pp0_stage0_iter34_ignore_call10_assign_proc : process(BFIFO_2_full_n, icmp_ln878_reg_232_pp0_iter33_reg)
    begin
                ap_block_state36_pp0_stage0_iter34_ignore_call10 <= ((icmp_ln878_reg_232_pp0_iter33_reg = ap_const_lv1_0) and (ap_const_logic_0 = BFIFO_2_full_n));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(CFIFO_empty_n, icmp_ln878_reg_232)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_const_logic_0 = CFIFO_empty_n));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call10_assign_proc : process(CFIFO_empty_n, icmp_ln878_reg_232)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call10 <= ((icmp_ln878_reg_232 = ap_const_lv1_0) and (ap_const_logic_0 = CFIFO_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7_ignore_call10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln878_fu_126_p2)
    begin
        if ((icmp_ln878_fu_126_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_padd_fu_110_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp58) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_padd_fu_110_ap_ce <= ap_const_logic_1;
        else 
            grp_padd_fu_110_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_padd_fu_110_p1_x <= CFIFO_dout(77 downto 65);
    grp_padd_fu_110_p1_y <= CFIFO_dout(64 downto 52);
    grp_padd_fu_110_p1_z <= CFIFO_dout(51 downto 39);
    grp_padd_fu_110_p2_x <= CFIFO_dout(38 downto 26);
    grp_padd_fu_110_p2_y <= CFIFO_dout(25 downto 13);
    grp_padd_fu_110_p2_z <= CFIFO_dout(13 - 1 downto 0);
    i_3_fu_120_p2 <= std_logic_vector(unsigned(i_reg_99) + unsigned(ap_const_lv13_1));
    icmp_ln878_fu_126_p2 <= "1" when (i_reg_99 = num_padd_ops_read_reg_222) else "0";

    num_padd_ops_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_padd_ops_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_padd_ops_blk_n <= num_padd_ops_empty_n;
        else 
            num_padd_ops_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    num_padd_ops_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_padd_ops_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_padd_ops_read <= ap_const_logic_1;
        else 
            num_padd_ops_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
