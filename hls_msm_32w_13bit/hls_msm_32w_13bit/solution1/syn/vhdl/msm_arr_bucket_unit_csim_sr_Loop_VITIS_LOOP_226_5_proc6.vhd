-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_padd_ops_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    num_padd_ops_empty_n : IN STD_LOGIC;
    num_padd_ops_read : OUT STD_LOGIC;
    CFIFO_dout : IN STD_LOGIC_VECTOR (81 downto 0);
    CFIFO_empty_n : IN STD_LOGIC;
    CFIFO_read : OUT STD_LOGIC;
    BFIFO_2_din : OUT STD_LOGIC_VECTOR (42 downto 0);
    BFIFO_2_full_n : IN STD_LOGIC;
    BFIFO_2_write : OUT STD_LOGIC );
end;


architecture behav of msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal num_padd_ops_blk_n : STD_LOGIC;
    signal CFIFO_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln878_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal BFIFO_2_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln878_reg_220_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_97 : STD_LOGIC_VECTOR (12 downto 0);
    signal num_padd_ops_read_reg_210 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_3_fu_108_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln878_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpVal1_V_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal v2_V_7_fu_169_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_7_reg_229 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_6_fu_185_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_6_reg_234 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_fu_195_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal v2_V_reg_239 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmpVal2_V_3_fu_159_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmpVal2_V_fu_129_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmpVal2_V_4_fu_175_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmpVal2_V_1_fu_139_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal Part2_V_fu_191_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmpVal2_V_2_fu_149_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_97 <= ap_const_lv13_0;
            elsif (((icmp_ln878_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_97 <= i_3_fu_108_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln878_reg_220 <= icmp_ln878_fu_114_p2;
                icmp_ln878_reg_220_pp0_iter1_reg <= icmp_ln878_reg_220;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                num_padd_ops_read_reg_210 <= num_padd_ops_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmpVal1_V_reg_224 <= CFIFO_dout(81 downto 78);
                v2_V_6_reg_234 <= v2_V_6_fu_185_p2;
                v2_V_7_reg_229 <= v2_V_7_fu_169_p2;
                v2_V_reg_239 <= v2_V_fu_195_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, num_padd_ops_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, icmp_ln878_fu_114_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln878_fu_114_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln878_fu_114_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    BFIFO_2_blk_n_assign_proc : process(BFIFO_2_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln878_reg_220_pp0_iter1_reg)
    begin
        if (((icmp_ln878_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            BFIFO_2_blk_n <= BFIFO_2_full_n;
        else 
            BFIFO_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    BFIFO_2_din <= (((tmpVal1_V_reg_224 & v2_V_7_reg_229) & v2_V_6_reg_234) & v2_V_reg_239);

    BFIFO_2_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln878_reg_220_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln878_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            BFIFO_2_write <= ap_const_logic_1;
        else 
            BFIFO_2_write <= ap_const_logic_0;
        end if; 
    end process;


    CFIFO_blk_n_assign_proc : process(CFIFO_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln878_reg_220)
    begin
        if (((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            CFIFO_blk_n <= CFIFO_empty_n;
        else 
            CFIFO_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    CFIFO_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln878_reg_220, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            CFIFO_read <= ap_const_logic_1;
        else 
            CFIFO_read <= ap_const_logic_0;
        end if; 
    end process;

    Part2_V_fu_191_p1 <= CFIFO_dout(13 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_220, ap_enable_reg_pp0_iter2, icmp_ln878_reg_220_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln878_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_220, ap_enable_reg_pp0_iter2, icmp_ln878_reg_220_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln878_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(CFIFO_empty_n, BFIFO_2_full_n, ap_enable_reg_pp0_iter1, icmp_ln878_reg_220, ap_enable_reg_pp0_iter2, icmp_ln878_reg_220_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln878_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = BFIFO_2_full_n)) or ((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = CFIFO_empty_n)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, num_padd_ops_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(CFIFO_empty_n, icmp_ln878_reg_220)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln878_reg_220 = ap_const_lv1_0) and (ap_const_logic_0 = CFIFO_empty_n));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(BFIFO_2_full_n, icmp_ln878_reg_220_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln878_reg_220_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BFIFO_2_full_n));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln878_fu_114_p2)
    begin
        if ((icmp_ln878_fu_114_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_108_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv13_1));
    icmp_ln878_fu_114_p2 <= "1" when (i_reg_97 = num_padd_ops_read_reg_210) else "0";

    num_padd_ops_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_padd_ops_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_padd_ops_blk_n <= num_padd_ops_empty_n;
        else 
            num_padd_ops_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    num_padd_ops_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_padd_ops_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (num_padd_ops_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_padd_ops_read <= ap_const_logic_1;
        else 
            num_padd_ops_read <= ap_const_logic_0;
        end if; 
    end process;

    tmpVal2_V_1_fu_139_p4 <= CFIFO_dout(64 downto 52);
    tmpVal2_V_2_fu_149_p4 <= CFIFO_dout(51 downto 39);
    tmpVal2_V_3_fu_159_p4 <= CFIFO_dout(38 downto 26);
    tmpVal2_V_4_fu_175_p4 <= CFIFO_dout(25 downto 13);
    tmpVal2_V_fu_129_p4 <= CFIFO_dout(77 downto 65);
    v2_V_6_fu_185_p2 <= std_logic_vector(unsigned(tmpVal2_V_4_fu_175_p4) + unsigned(tmpVal2_V_1_fu_139_p4));
    v2_V_7_fu_169_p2 <= std_logic_vector(unsigned(tmpVal2_V_3_fu_159_p4) + unsigned(tmpVal2_V_fu_129_p4));
    v2_V_fu_195_p2 <= std_logic_vector(unsigned(Part2_V_fu_191_p1) + unsigned(tmpVal2_V_2_fu_149_p4));
end behav;
