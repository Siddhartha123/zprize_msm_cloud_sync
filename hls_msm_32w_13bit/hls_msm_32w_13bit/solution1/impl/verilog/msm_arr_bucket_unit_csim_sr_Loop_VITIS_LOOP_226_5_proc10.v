// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        num_padd_ops_dout,
        num_padd_ops_empty_n,
        num_padd_ops_read,
        CFIFO_dout,
        CFIFO_empty_n,
        CFIFO_read,
        BFIFO_2_din,
        BFIFO_2_full_n,
        BFIFO_2_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state37 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [12:0] num_padd_ops_dout;
input   num_padd_ops_empty_n;
output   num_padd_ops_read;
input  [81:0] CFIFO_dout;
input   CFIFO_empty_n;
output   CFIFO_read;
output  [42:0] BFIFO_2_din;
input   BFIFO_2_full_n;
output   BFIFO_2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg num_padd_ops_read;
reg CFIFO_read;
reg BFIFO_2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    num_padd_ops_blk_n;
reg    CFIFO_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln878_reg_232;
reg    BFIFO_2_blk_n;
reg    ap_enable_reg_pp0_iter34;
reg   [0:0] icmp_ln878_reg_232_pp0_iter33_reg;
reg   [12:0] i_reg_99;
reg   [12:0] num_padd_ops_read_reg_222;
wire   [12:0] i_3_fu_120_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
reg    ap_block_state36_pp0_stage0_iter34;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_126_p2;
reg   [0:0] icmp_ln878_reg_232_pp0_iter1_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter2_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter3_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter4_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter5_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter6_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter7_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter8_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter9_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter10_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter11_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter12_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter13_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter14_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter15_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter16_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter17_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter18_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter19_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter20_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter21_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter22_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter23_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter24_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter25_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter26_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter27_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter28_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter29_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter30_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter31_reg;
reg   [0:0] icmp_ln878_reg_232_pp0_iter32_reg;
reg   [3:0] tmpVal1_V_reg_236;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter2_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter3_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter4_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter5_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter6_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter7_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter8_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter9_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter10_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter11_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter12_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter13_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter14_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter15_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter16_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter17_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter18_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter19_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter20_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter21_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter22_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter23_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter24_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter25_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter26_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter27_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter28_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter29_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter30_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter31_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter32_reg;
reg   [3:0] tmpVal1_V_reg_236_pp0_iter33_reg;
reg   [12:0] v2_V_7_reg_271;
reg   [12:0] v2_V_6_reg_276;
reg   [12:0] v2_V_reg_281;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
wire   [12:0] grp_padd_fu_110_p1_x;
wire   [12:0] grp_padd_fu_110_p1_y;
wire   [12:0] grp_padd_fu_110_p1_z;
wire   [12:0] grp_padd_fu_110_p2_x;
wire   [12:0] grp_padd_fu_110_p2_y;
wire   [12:0] grp_padd_fu_110_p2_z;
wire   [12:0] grp_padd_fu_110_ap_return_0;
wire   [12:0] grp_padd_fu_110_ap_return_1;
wire   [12:0] grp_padd_fu_110_ap_return_2;
reg    grp_padd_fu_110_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call10;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call10;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call10;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call10;
wire    ap_block_state6_pp0_stage0_iter4_ignore_call10;
wire    ap_block_state7_pp0_stage0_iter5_ignore_call10;
wire    ap_block_state8_pp0_stage0_iter6_ignore_call10;
wire    ap_block_state9_pp0_stage0_iter7_ignore_call10;
wire    ap_block_state10_pp0_stage0_iter8_ignore_call10;
wire    ap_block_state11_pp0_stage0_iter9_ignore_call10;
wire    ap_block_state12_pp0_stage0_iter10_ignore_call10;
wire    ap_block_state13_pp0_stage0_iter11_ignore_call10;
wire    ap_block_state14_pp0_stage0_iter12_ignore_call10;
wire    ap_block_state15_pp0_stage0_iter13_ignore_call10;
wire    ap_block_state16_pp0_stage0_iter14_ignore_call10;
wire    ap_block_state17_pp0_stage0_iter15_ignore_call10;
wire    ap_block_state18_pp0_stage0_iter16_ignore_call10;
wire    ap_block_state19_pp0_stage0_iter17_ignore_call10;
wire    ap_block_state20_pp0_stage0_iter18_ignore_call10;
wire    ap_block_state21_pp0_stage0_iter19_ignore_call10;
wire    ap_block_state22_pp0_stage0_iter20_ignore_call10;
wire    ap_block_state23_pp0_stage0_iter21_ignore_call10;
wire    ap_block_state24_pp0_stage0_iter22_ignore_call10;
wire    ap_block_state25_pp0_stage0_iter23_ignore_call10;
wire    ap_block_state26_pp0_stage0_iter24_ignore_call10;
wire    ap_block_state27_pp0_stage0_iter25_ignore_call10;
wire    ap_block_state28_pp0_stage0_iter26_ignore_call10;
wire    ap_block_state29_pp0_stage0_iter27_ignore_call10;
wire    ap_block_state30_pp0_stage0_iter28_ignore_call10;
wire    ap_block_state31_pp0_stage0_iter29_ignore_call10;
wire    ap_block_state32_pp0_stage0_iter30_ignore_call10;
wire    ap_block_state33_pp0_stage0_iter31_ignore_call10;
wire    ap_block_state34_pp0_stage0_iter32_ignore_call10;
wire    ap_block_state35_pp0_stage0_iter33_ignore_call10;
reg    ap_block_state36_pp0_stage0_iter34_ignore_call10;
reg    ap_block_pp0_stage0_11001_ignoreCallOp58;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state37;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
end

msm_arr_padd grp_padd_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .p1_x(grp_padd_fu_110_p1_x),
    .p1_y(grp_padd_fu_110_p1_y),
    .p1_z(grp_padd_fu_110_p1_z),
    .p2_x(grp_padd_fu_110_p2_x),
    .p2_y(grp_padd_fu_110_p2_y),
    .p2_z(grp_padd_fu_110_p2_z),
    .ap_return_0(grp_padd_fu_110_ap_return_0),
    .ap_return_1(grp_padd_fu_110_ap_return_1),
    .ap_return_2(grp_padd_fu_110_ap_return_2),
    .ap_ce(grp_padd_fu_110_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end else if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter34 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_99 <= 13'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_fu_126_p2 == 1'd0))) begin
        i_reg_99 <= i_3_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_reg_232 <= icmp_ln878_fu_126_p2;
        icmp_ln878_reg_232_pp0_iter1_reg <= icmp_ln878_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln878_reg_232_pp0_iter10_reg <= icmp_ln878_reg_232_pp0_iter9_reg;
        icmp_ln878_reg_232_pp0_iter11_reg <= icmp_ln878_reg_232_pp0_iter10_reg;
        icmp_ln878_reg_232_pp0_iter12_reg <= icmp_ln878_reg_232_pp0_iter11_reg;
        icmp_ln878_reg_232_pp0_iter13_reg <= icmp_ln878_reg_232_pp0_iter12_reg;
        icmp_ln878_reg_232_pp0_iter14_reg <= icmp_ln878_reg_232_pp0_iter13_reg;
        icmp_ln878_reg_232_pp0_iter15_reg <= icmp_ln878_reg_232_pp0_iter14_reg;
        icmp_ln878_reg_232_pp0_iter16_reg <= icmp_ln878_reg_232_pp0_iter15_reg;
        icmp_ln878_reg_232_pp0_iter17_reg <= icmp_ln878_reg_232_pp0_iter16_reg;
        icmp_ln878_reg_232_pp0_iter18_reg <= icmp_ln878_reg_232_pp0_iter17_reg;
        icmp_ln878_reg_232_pp0_iter19_reg <= icmp_ln878_reg_232_pp0_iter18_reg;
        icmp_ln878_reg_232_pp0_iter20_reg <= icmp_ln878_reg_232_pp0_iter19_reg;
        icmp_ln878_reg_232_pp0_iter21_reg <= icmp_ln878_reg_232_pp0_iter20_reg;
        icmp_ln878_reg_232_pp0_iter22_reg <= icmp_ln878_reg_232_pp0_iter21_reg;
        icmp_ln878_reg_232_pp0_iter23_reg <= icmp_ln878_reg_232_pp0_iter22_reg;
        icmp_ln878_reg_232_pp0_iter24_reg <= icmp_ln878_reg_232_pp0_iter23_reg;
        icmp_ln878_reg_232_pp0_iter25_reg <= icmp_ln878_reg_232_pp0_iter24_reg;
        icmp_ln878_reg_232_pp0_iter26_reg <= icmp_ln878_reg_232_pp0_iter25_reg;
        icmp_ln878_reg_232_pp0_iter27_reg <= icmp_ln878_reg_232_pp0_iter26_reg;
        icmp_ln878_reg_232_pp0_iter28_reg <= icmp_ln878_reg_232_pp0_iter27_reg;
        icmp_ln878_reg_232_pp0_iter29_reg <= icmp_ln878_reg_232_pp0_iter28_reg;
        icmp_ln878_reg_232_pp0_iter2_reg <= icmp_ln878_reg_232_pp0_iter1_reg;
        icmp_ln878_reg_232_pp0_iter30_reg <= icmp_ln878_reg_232_pp0_iter29_reg;
        icmp_ln878_reg_232_pp0_iter31_reg <= icmp_ln878_reg_232_pp0_iter30_reg;
        icmp_ln878_reg_232_pp0_iter32_reg <= icmp_ln878_reg_232_pp0_iter31_reg;
        icmp_ln878_reg_232_pp0_iter33_reg <= icmp_ln878_reg_232_pp0_iter32_reg;
        icmp_ln878_reg_232_pp0_iter3_reg <= icmp_ln878_reg_232_pp0_iter2_reg;
        icmp_ln878_reg_232_pp0_iter4_reg <= icmp_ln878_reg_232_pp0_iter3_reg;
        icmp_ln878_reg_232_pp0_iter5_reg <= icmp_ln878_reg_232_pp0_iter4_reg;
        icmp_ln878_reg_232_pp0_iter6_reg <= icmp_ln878_reg_232_pp0_iter5_reg;
        icmp_ln878_reg_232_pp0_iter7_reg <= icmp_ln878_reg_232_pp0_iter6_reg;
        icmp_ln878_reg_232_pp0_iter8_reg <= icmp_ln878_reg_232_pp0_iter7_reg;
        icmp_ln878_reg_232_pp0_iter9_reg <= icmp_ln878_reg_232_pp0_iter8_reg;
        tmpVal1_V_reg_236_pp0_iter10_reg <= tmpVal1_V_reg_236_pp0_iter9_reg;
        tmpVal1_V_reg_236_pp0_iter11_reg <= tmpVal1_V_reg_236_pp0_iter10_reg;
        tmpVal1_V_reg_236_pp0_iter12_reg <= tmpVal1_V_reg_236_pp0_iter11_reg;
        tmpVal1_V_reg_236_pp0_iter13_reg <= tmpVal1_V_reg_236_pp0_iter12_reg;
        tmpVal1_V_reg_236_pp0_iter14_reg <= tmpVal1_V_reg_236_pp0_iter13_reg;
        tmpVal1_V_reg_236_pp0_iter15_reg <= tmpVal1_V_reg_236_pp0_iter14_reg;
        tmpVal1_V_reg_236_pp0_iter16_reg <= tmpVal1_V_reg_236_pp0_iter15_reg;
        tmpVal1_V_reg_236_pp0_iter17_reg <= tmpVal1_V_reg_236_pp0_iter16_reg;
        tmpVal1_V_reg_236_pp0_iter18_reg <= tmpVal1_V_reg_236_pp0_iter17_reg;
        tmpVal1_V_reg_236_pp0_iter19_reg <= tmpVal1_V_reg_236_pp0_iter18_reg;
        tmpVal1_V_reg_236_pp0_iter20_reg <= tmpVal1_V_reg_236_pp0_iter19_reg;
        tmpVal1_V_reg_236_pp0_iter21_reg <= tmpVal1_V_reg_236_pp0_iter20_reg;
        tmpVal1_V_reg_236_pp0_iter22_reg <= tmpVal1_V_reg_236_pp0_iter21_reg;
        tmpVal1_V_reg_236_pp0_iter23_reg <= tmpVal1_V_reg_236_pp0_iter22_reg;
        tmpVal1_V_reg_236_pp0_iter24_reg <= tmpVal1_V_reg_236_pp0_iter23_reg;
        tmpVal1_V_reg_236_pp0_iter25_reg <= tmpVal1_V_reg_236_pp0_iter24_reg;
        tmpVal1_V_reg_236_pp0_iter26_reg <= tmpVal1_V_reg_236_pp0_iter25_reg;
        tmpVal1_V_reg_236_pp0_iter27_reg <= tmpVal1_V_reg_236_pp0_iter26_reg;
        tmpVal1_V_reg_236_pp0_iter28_reg <= tmpVal1_V_reg_236_pp0_iter27_reg;
        tmpVal1_V_reg_236_pp0_iter29_reg <= tmpVal1_V_reg_236_pp0_iter28_reg;
        tmpVal1_V_reg_236_pp0_iter2_reg <= tmpVal1_V_reg_236;
        tmpVal1_V_reg_236_pp0_iter30_reg <= tmpVal1_V_reg_236_pp0_iter29_reg;
        tmpVal1_V_reg_236_pp0_iter31_reg <= tmpVal1_V_reg_236_pp0_iter30_reg;
        tmpVal1_V_reg_236_pp0_iter32_reg <= tmpVal1_V_reg_236_pp0_iter31_reg;
        tmpVal1_V_reg_236_pp0_iter33_reg <= tmpVal1_V_reg_236_pp0_iter32_reg;
        tmpVal1_V_reg_236_pp0_iter3_reg <= tmpVal1_V_reg_236_pp0_iter2_reg;
        tmpVal1_V_reg_236_pp0_iter4_reg <= tmpVal1_V_reg_236_pp0_iter3_reg;
        tmpVal1_V_reg_236_pp0_iter5_reg <= tmpVal1_V_reg_236_pp0_iter4_reg;
        tmpVal1_V_reg_236_pp0_iter6_reg <= tmpVal1_V_reg_236_pp0_iter5_reg;
        tmpVal1_V_reg_236_pp0_iter7_reg <= tmpVal1_V_reg_236_pp0_iter6_reg;
        tmpVal1_V_reg_236_pp0_iter8_reg <= tmpVal1_V_reg_236_pp0_iter7_reg;
        tmpVal1_V_reg_236_pp0_iter9_reg <= tmpVal1_V_reg_236_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_padd_ops_read_reg_222 <= num_padd_ops_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_232 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpVal1_V_reg_236 <= {{CFIFO_dout[81:78]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_232_pp0_iter32_reg == 1'd0))) begin
        v2_V_6_reg_276 <= grp_padd_fu_110_ap_return_1;
        v2_V_7_reg_271 <= grp_padd_fu_110_ap_return_0;
        v2_V_reg_281 <= grp_padd_fu_110_ap_return_2;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        BFIFO_2_blk_n = BFIFO_2_full_n;
    end else begin
        BFIFO_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        BFIFO_2_write = 1'b1;
    end else begin
        BFIFO_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_232 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CFIFO_blk_n = CFIFO_empty_n;
    end else begin
        CFIFO_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_232 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CFIFO_read = 1'b1;
    end else begin
        CFIFO_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_126_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp58) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_padd_fu_110_ap_ce = 1'b1;
    end else begin
        grp_padd_fu_110_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_blk_n = num_padd_ops_empty_n;
    end else begin
        num_padd_ops_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        num_padd_ops_read = 1'b1;
    end else begin
        num_padd_ops_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_126_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter33 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln878_fu_126_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter33 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BFIFO_2_din = {{{{tmpVal1_V_reg_236_pp0_iter33_reg}, {v2_V_7_reg_271}}, {v2_V_6_reg_276}}, {v2_V_reg_281}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_232 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_232 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp58 = (((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_232 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (ap_enable_reg_pp0_iter34 == 1'b1) & (1'b0 == BFIFO_2_full_n)) | ((icmp_ln878_reg_232 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == CFIFO_empty_n)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (num_padd_ops_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33_ignore_call10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_pp0_stage0_iter34 = ((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (1'b0 == BFIFO_2_full_n));
end

always @ (*) begin
    ap_block_state36_pp0_stage0_iter34_ignore_call10 = ((icmp_ln878_reg_232_pp0_iter33_reg == 1'd0) & (1'b0 == BFIFO_2_full_n));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln878_reg_232 == 1'd0) & (1'b0 == CFIFO_empty_n));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call10 = ((icmp_ln878_reg_232 == 1'd0) & (1'b0 == CFIFO_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7_ignore_call10 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_padd_fu_110_p1_x = {{CFIFO_dout[77:65]}};

assign grp_padd_fu_110_p1_y = {{CFIFO_dout[64:52]}};

assign grp_padd_fu_110_p1_z = {{CFIFO_dout[51:39]}};

assign grp_padd_fu_110_p2_x = {{CFIFO_dout[38:26]}};

assign grp_padd_fu_110_p2_y = {{CFIFO_dout[25:13]}};

assign grp_padd_fu_110_p2_z = CFIFO_dout[12:0];

assign i_3_fu_120_p2 = (i_reg_99 + 13'd1);

assign icmp_ln878_fu_126_p2 = ((i_reg_99 == num_padd_ops_read_reg_222) ? 1'b1 : 1'b0);

endmodule //msm_arr_bucket_unit_csim_sr_Loop_VITIS_LOOP_226_5_proc10
